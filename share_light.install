<?php

function share_light_install() {
  share_light_update_1();
  share_light_update_2();
  _share_light_set_channel_default_states();
}

/**
 * helper function to set channel defaults.
 */
function _share_light_set_channel_default_states() {
  // every channel but pinterest is enabled by default
  $default_channels = _share_light_channels();
  foreach ($default_channels as $channel_name => $channel_title) {
    $default_channels[$channel_name] = $channel_name;
  }
  $default_channels['pinterest'] = 0;
  variable_set('share_light_channels_enabled', $default_channels);
}

/**
 * Set default enabled channels.
 */
function share_light_update_5() {
  _share_light_set_channel_default_states();
}

/**
 * share_light_toggle --> share_light field type
 */
function share_light_update_4() {
  $default = array(
    'toggle' => 1,
    'options' => array (
      'share_url' => '',
      'counter_toggle' => 1,
      'advanced' => array (
        'channel_twitter_toggle' => 1,
        'channel_twitter_text' => '',
        'channel_facebook_toggle' => 1,
        'channel_forward_toggle' => 1,
      ),
      'image' => array(
        'fid' => 0,
      ),
    ),
  );

  // create new field
  $field = \Drupal\little_helpers\Field\Field::fromType('share_light', 'share_light');
  $field->settings = array();
  $field->save();

  // get needed bundles from old instances
  $oldinstances = field_read_instances(array('field_name' => 'share_light_toggle', 'entity_type' => 'node'));
  if (empty($oldinstances)) {
    return "No fields share_light_toggl_toggle found. Nothing to migrate.";
  }

  $bundles = array();
  foreach ($oldinstances as $oldinstance) {
    $bundles[] = $oldinstance['bundle'];
  }
  foreach ($bundles as $bundlename) {
    $bundle = new \Drupal\little_helpers\Field\Bundle('node', $bundlename);
    $instance = \Drupal\little_helpers\Field\Instance::fromField($field, $bundle);
    $instance->label = t('Share options');
    $instance->description = t('Set the share options for this page.');
    $instance->widget = array(
      'module'   => 'share_light',
      'type'     => 'share_light',
      'settings' => array(),
    );
    $instance->display = array(
      'default' => array(
        'label'    => 'hidden',
        'type'     => 'hidden',
        'settings' => array(),
      ),
      'cck_blocks' => array(
        'label'    => 'hidden',
        'type'     => 'hidden',
        'settings' => array(),
      ),
    );
    $instance->settings = array (
      'exclude_cv' => false,
      'custom_add_another' => '',
      'custom_remove' => '',
      'user_register_form' => false,
    );
    $instance->default_value[0] = $default;
    $instance->save();
  }

  // copy old field data to new fields
  // thereby preserving the value field (on/off) of share_light_toggle
  db_query("INSERT INTO {field_data_share_light} 
    (entity_type, bundle, deleted, entity_id, revision_id, language, delta, share_light_toggle)
    SELECT entity_type, bundle, deleted, entity_id, revision_id, language, delta, share_light_toggle_value
    FROM {field_data_share_light_toggle}");
  db_query("INSERT INTO {field_revision_share_light} 
    (entity_type, bundle, deleted, entity_id, revision_id, language, delta, share_light_toggle)
    SELECT entity_type, bundle, deleted, entity_id, revision_id, language, delta, share_light_toggle_value
    FROM {field_revision_share_light_toggle}");

  $serialized_options = serialize($default['options']);
  db_query("UPDATE {field_data_share_light} SET share_light_options=:options", array(':options' => $serialized_options));
  db_query("UPDATE {field_revision_share_light} SET share_light_options=:options", array(':options' => $serialized_options));

  // clean up the db
  db_query("DELETE FROM {field_config} WHERE field_name='share_light_toggle'");
  db_query("DELETE FROM {field_config_instance} WHERE field_name='share_light_toggle'");
  db_drop_table('field_data_share_light_toggle');
  db_drop_table('field_revision_share_light_toggle');
}

/**
 * field_share_light -> share_light_toggle
 */
function share_light_update_3() {
  $oldinstances = field_read_instances(array('field_name' => 'field_share_light', 'entity_type' => 'node'));
  if (!empty($oldinstances)) {
    db_query("UPDATE {field_config_instance} SET field_name='share_light_toggle', field_id=(SELECT id from {field_config} WHERE field_name='share_light_toggle') WHERE field_name='field_share_light'");
    db_query("INSERT INTO {field_data_share_light_toggle} SELECT * FROM {field_data_field_share_light}");
    db_query("INSERT INTO {field_revision_share_light_toggle} SELECT * FROM {field_revision_field_share_light");
    db_query("DELETE FROM {field_data_field_share_light}");
    db_query("DELETE FROM {field_revision_field_share_light}");
  } else {
    return "No fields field_share_light found. Nothing to migrate.";
  }
}

/**
 * Define field haupt_seite_toggle. Use utility function to add instance.
 */
function share_light_update_2() {
  $field = array (
    'global_block_settings' => '1',
    'field_name' => 'share_light_title',
    'settings' => array (
      'max_length' => '255',
    ),
    'type' => 'text',
    'module' => 'text',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
  );
  field_create_field($field);
}

/**
 * Define field haupt_seite_toggle. Use utility function to add instance.
 */
function share_light_update_1() {
  $field = array (
    'global_block_settings' => '1',
    'field_name' => 'share_light_toggle',
    'settings' => array (
      'allowed_values' => array (
        0 => '',
        1 => '',
      ),
    ),
    'type' => 'list_boolean',
    'module' => 'list',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
  );
  field_create_field($field);
}
/**
 * Utility function that let's you conveniently add instances
 * of the haupt_seite_toggle field to your content-type.
 */
function _share_light_add_field_share_light_title($bundle) {
  $instance = array (
    'bundle' => $bundle,
    'label' => 'Share box title text',
    'widget' => array (
      'weight' => '8',
      'type' => 'text_textfield',
      'module' => 'text',
      'active' => 1,
      'settings' => array (
        'size' => '60',
      ),
    ),
    'display' => array (
      'default' => array (
        'label' => 'hidden',
        'type' => 'hidden',
      ),
    ),
    'required' => 0,
    'description' => '',
    'exclude_cv' => 0,
    'field_name' => 'share_light_title',
    'entity_type' => 'node',
  );

  field_create_instance($instance);
}

function _share_light_add_field_to_node_type($bundle) {
  $instance = array (
    'bundle' => $bundle,
    'label' => 'Display share box.',
    'widget' => array (
      'weight' => '7',
      'type' => 'options_onoff',
      'module' => 'options',
      'active' => 1,
      'settings' => array (
        'display_label' => 1,
      ),
    ),
    'display' => array (
      'default' => array (
        'label' => 'hidden',
        'type' => 'hidden',
      ),
    ),
    'required' => 0,
    'description' => 'Enable to display a share box.',
    'exclude_cv' => 0,
    'field_name' => 'share_light_toggle',
    'entity_type' => 'node',
  );

  field_create_instance($instance);
}

/**
 * Implements hook_field_schema().
 */
function share_light_field_schema($field) {
  if ($field['type'] == 'share_light') {
    $columns['toggle'] = array(
      'type' => 'int',
      'not null' => FALSE,
      'default' => 0,
    );
    $columns['options'] = array(
      'type' => 'blob',
      'not null' => FALSE,
      'serialize' => TRUE,
    );
  return array(
    'columns' => $columns,
  );
  }
}

