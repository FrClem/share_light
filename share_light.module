<?php

/**
 * helper config function.
 */
function _share_light_channels() {
  // return the known channles indexed by channel name
  return array(
    'twitter' => t('Twitter'),
    'facebook' => t('Facebook'),
    'forward' => t('Email'),
  );
}

/**
 * Implements hook_menu().
 */
function share_light_menu() {
  // implement a special node-share page on behalf
  // of forward.module
  $items['node/%node/forward'] = array(
    'title'            => variable_get('forward_email_title', 'Forward this page to a friend'),
    'page callback'    => 'share_light_forward_page',
    'page arguments'   => array(1),
    'access arguments' => array('access forward'),
    'type'             => MENU_CALLBACK
  );

  $items['admin/config/content/share_light'] = array(
    'title' => t('Share light'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('share_light_settings_form'),
    'description' => 'Configure share light block.',
    'access arguments' => array('administer share'),
  );
  return $items;
}

/**
 * Menu callback: settings form.
 */
function share_light_settings_form() {

  $form['channels'] = array(
    '#title' => t('Enable social media channels for sharing.'),
    '#type' => 'checkboxes',
    '#options' => _share_light_channels(),
    '#description' => t('The content types for which to enable Open Graph meta tags. If none are selected then tags will be enabled for ALL content types.'),
    '#default_value' => variable_get('share_light_enabled_channels', array_keys(_share_light_channels())),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  return $form;
}


function share_light_settings_form_submit($form, &$form_state) {

  $values = $form_state['values'];

  // save content types enabled
  variable_set('share_light_enabled_channels', $values['channels']);

  // success
  drupal_set_message("Share light settings have been updated");
}
/**
 * Page callback for node/%/forward
 */
function share_light_forward_page($node) {
  $_GET['path'] = 'node/' . $node->nid;
  return forward_page();
}

/**
 * Implements hook_block_info().
 */
function share_light_block_info() {
  $blocks = array();

  $blocks['current_page'] = array(
    'info' => t('Share this page'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param string $path to the page - current url will be used if empty
 * @param array $options additional overrides for default options
 * @return renderable array
 */
function share_light_block_view($id, $link = NULL, $options = array()) {
  $v = array();
  $v['subject'] = isset($options['subject']) ? t($options['subject']) : t('Share this page!');

  $links = array();
  $title = isset($options['title']) ? $options['title'] : drupal_get_title();

  if (!is_array($link)) {
    if (is_string($link)) {
      $link = array('path' => $link);
    } else {
      $link = array('path' => current_path());
    }
  }
  $url = url($link['path'], $link + array('absolute' => TRUE));

  $self = NULL;
  if (($node = menu_get_object()) && $node->nid) {
    $self = $node;
    // use new field if present, try the old one otherwise
    $share_light_fields = _share_light_field_instances('node', $node, 'share_light');
    $share_light_field = array_shift($share_light_fields);
    if (isset($share_light_field['toggle'])) {
      if ($share_light_field['toggle'] == '0') {
        // do not display the block
        return NULL;
      }
    } else {
      // if there is a defined entry for the share_light toggle field use this
      // otherwise check for the share_light default behaviour variable
      $field = field_get_items('node', $node, 'share_light_toggle');
      // check for remaining "old" fields (former field name)
      if (!$field || !count($field)) {
        $field = field_get_items('node', $node, 'field_share_light');
      }
      if ($field && count($field)) {
        if (!$field[0]['value']) {
          return NULL;
        }
      } elseif (variable_get('share_light_default_toggle', '1') == '0') {
        return NULL;
      }
    }
  }

  if (isset($_GET['share'])) {
    $share_url = $_GET['share'];
  }

  $check_url = (isset($share_url) && !empty($share_url)) ? $share_url : $url;

  // call hook_share_light_alter to override the share_url
  // you can determine whether to override in the hook
  // use this for further customizations
  $results = module_invoke_all('share_light_alter', $self, $check_url);
  if (isset($results['url']) && !empty($results['url'])) {
    $share_url = $results['url'];
  }
  if (isset($results['title']) && !empty($results['title'])) {
    $title = $results['title'];
  }

  // if share is set valid, use this to generate the URL to share
  // overrides any previously defined paths/urls
  if (!empty($share_url)) {
    if (valid_url($share_url, TRUE)) { // if absolute url: use it
      $url = $share_url;
      // since we do not want to scrape the title from the (most likely) remote page...
      if(isset($title)) {
        $title = '[shared via] ' . $title;
      }
    } else if (valid_url($share_url, FALSE)) { // if its an relative path, generate it
      $link['path'] = $share_url;
      $url = url($link['path'], array('absolute' => TRUE));
      // get the title to the shared page and override the prev set $title
      $p = drupal_get_normal_path($link['path']);
      $node = menu_get_object('node', 1, $p);
      if($node) {
        $title = $node->title;
      }
    }
  }

  // get enabled channels
  $channels = variable_get('share_light_enabled_channels', array_keys(_share_light_channels()));
  // display the enabled channels
  foreach ($channels as $channel_name => $channel_value) {
    if ($channel_value) {
      if (!isset($share_light_field['options']['channel_'.$channel_name.'_toggle']) ||
          $share_light_field['options']['channel_'.$channel_name.'_toggle'] == 1) {
        $call_name = '_share_light_channel_' . $channel_name;
        $links[$channel_name] = $call_name($channel_name, $channel_value, $url, $title, $share_light_field, $link);
      }
    }
  }

  foreach ($links as &$x) {
    $x['title'] = "<span>{$x['title']}</span>";
    $x['html'] = TRUE;
    $x['attributes']['target'] = '_blank';
  }
  $v['content'] = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array('class' => array('share-light')),
  );
  return $v;
}

/**
 * Implements HOOK_block_view_MODULE_DELTA_alter().
 */
function share_light_block_view_share_light_current_page_alter($data, $block) {
  if (($node = menu_get_object()) && $node->nid) {
    // use field share_light_title to override default block title
    $field_title = field_get_items('node', $node, 'share_light_title');
    if ($field_title && count($field_title) && $field_title[0]['value']) {
      $block->title = $field_title[0]['value'];
    }
  }
}

function _share_light_channel_facebook($channel_name, $channel_value, $url, $title, $share_light_field, $link) {
  return array(
    'title' => 'Facebook',
    'href' => 'https://www.facebook.com/sharer.php',
    'query' => array('u' => urlencode($url)),
    'attributes' => array('title' => t('Share this via Facebook!'))
  );
}
function _share_light_channel_twitter($channel_name, $channel_value, $url, $title, $share_light_field, $link) {
  $text = $url;
  if (!empty($share_light_field['options']['channel_'.$channel_name.'_text'])) {
    $text = $share_light_field['options']['channel_'.$channel_name.'_text'] . ' ' . $url;
  }
  return array(
    'title' => 'Twitter',
    'href' => 'http://twitter.com/home',
    'query' => array('status' => $text),
    'attributes' => array('title' => t('Share this via Twitter!'))
  );
}
function _share_light_channel_forward($channel_name, $channel_value, $url, $title, $share_light_field, $link) {
  $query['path'] = $link['path'];
  if (isset($link['query'])) {
    $query['query'] = $link['query'];
  }
  $parts = explode('/', $query['path']);
  if (count($parts) == 2 && $parts[0] == 'node' && is_numeric($parts[1])) {
    unset($query['path']);
    return array(
      'title' => 'E-Mail',
      'href' => $link['path'] . '/forward',
      'query' => $query,
      'attributes' => array('title' => t('Share this via E-Mail!'))
    );
  } else {
    return array(
      'title' => 'E-Mail',
      'href' => 'forward',
      'query' => $query,
      'attributes' => array('title' => t('Share this via E-Mail!'))
    );
  }
}

/**
 * Implements hook_field_widget_form().
 */
function share_light_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $item = isset($items[$delta]) ? $items[$delta] : array();
  if (isset($instance['default_value'][$delta]) && !isset($items[$delta])) {
    $item = $instance['default_value'][$delta];
  }

  $default_channels = _share_light_channels();
  $channels = variable_get('share_light_enabled_channels', $default_channels);

  $channel_default_values = array();
  foreach ($default_channels as $channel_name => $channel_value) {
    $channel_default_values['channel_'.$channel_name.'_toggle'] = $channels[$channel_name] ? 1 : 0;
    $channel_default_values['channel_'.$channel_name.'_text'] = '';
  }

  // TODO nid can be empty when new node is created
  /*
  $nid = $form['nid']['#value'];
  $lang_list = language_list();
  $lang = !empty($form['language']['#value']) ? $form['language']['#value'] : NULL;
  $node_path_or_alias = drupal_get_path_alias('node/'.$nid, $lang);
  $default_url = url('node/'.$nid, array(
    'absolute' => TRUE,
    'language' => $lang_list[$lang],
  ));
   */
  $default_url = '';
  $defaults = array(
    'toggle' => variable_get('share_light_default_toggle', '1'),
    'options' => array(
      'share_url' => $default_url,
      'counter_toggle' => variable_get('share_light_default_counter_toggle', 1),
      'advanced' => $channel_default_values,
    ),
  );

  $item = drupal_array_merge_deep($defaults, $item);

  $element['toggle'] = array(
    '#title' => t('Display a share block.'),
    '#description' => t('Display a share block.'),
    '#type' => 'checkbox',
    '#default_value' => $item['toggle'],
  );

  $element['options'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(
        '#edit-'.strtr($field['field_name'], '_', '-').'-'.$langcode.'-'.$delta.'-toggle' => array('checked' => TRUE),
      ),
    ),
  );

  $element['options']['share_url'] = array(
    '#title' => t('URL to be shared.'),
    '#description' => t('URL to be shared.'),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => $item['options']['share_url'],
);

  $element['options']['counter_toggle'] = array(
    '#title' => t('Show counter (number of shares) along with share options'),
    '#description' => t('Show counter (number of shares) along with share options'),
    '#type' => 'checkbox',
    '#default_value' => $item['options']['counter_toggle'],
);

  $element['options']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced share options'),
    '#collapsible' => TRUE,
  );

  $weight = 10;
  foreach ($channels as $channel_name => $channel_value) {
    $title = $default_channels[$channel_name];
    $element['options']['advanced']['channel_'.$channel_name.'_toggle'] = array(
      '#title' => t('Show '.$title.' share button.'),
      '#description' => t('Enable '.$title.' on this page.'),
      '#type' => 'checkbox',
      '#default_value' => $item['options']['advanced']['channel_'.$channel_name.'_toggle'],
      '#access' => $channel_value ? TRUE : FALSE,
      '#weight' => $weight,
    );

    if ($channel_name == 'twitter') {
      $title = $default_channels[$channel_name];
      $element['options']['advanced']['channel_'.$channel_name.'_text'] = array(
        '#title' => t('Share text for ' . $title . '.'),
        '#description' => ('Share text for ' . $title . '.'),
        '#type' => 'textarea',
        '#cols' => 60,
        '#rows' => 2,
        '#maxlength' => 255,
        '#attributes' => array(),
        '#default_value' => $item['options']['advanced']['channel_'.$channel_name.'_text'],
        '#access' => $channel_value ? TRUE : FALSE,
        '#weight' => $element['options']['advanced']['channel_'.$channel_name.'_toggle']['#weight'] + 1,
      );
    }

    $weight += 10;
  }

  return $element;
}

/**
 * Implements hook_field_info().
 */
function share_light_field_info() {
  $info['share_light'] = array(
    'label' => t('Share light'),
    'description' => t('Allows you to display a share block.'),
    'settings' => array('style' => NULL),
    'default_widget' => 'share_light',
    'default_formatter' => 'share_light',
  );
  return $info;
}

/**
 * Implements hook_field_widget_info().
 */
function share_light_field_widget_info() {
  $info['share_light'] = array(
    'label' => t('Share light'),
    'field types' => array('share_light'),
    'settings' => array('size' => 60),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_info().
 */
function share_light_field_formatter_info() {
  $info['share_light'] = array(
    'label' => 'Share light',
    'field types' => array('share_light'),
  );
  return $info;
}

/**
 * Implements hook_field_presave().
 */
function share_light_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'share_light') {
    foreach ($items as &$item) {
      $item['options'] = serialize($item['options']);
    }
  }
}

/**
 * Implements hook_field_load().
 */
function share_light_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  if ($field['type'] == 'share_light') {
    foreach ($entities as $id => $entity) {
      foreach ($items[$id] as &$item) {
        $item['options'] = unserialize($item['options']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function share_light_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * utility function: returns all field items by field type in array
 * (indexed by field name)
 */
function _share_light_field_instances($entity_type, $node, $field_type) {
  $instances = field_info_instances($entity_type, $node->type);
  $fields = array();
  foreach ($instances as $instance) {
    $field_info = field_info_field($instance['field_name']);
    if ($field_info['type'] == $field_type) {
      $item = field_get_items($entity_type, $node, $instance['field_name']);
      if ($item) {
        $fields[$instance['field_name']] = $item[0];
      }
    }
  }
  return $fields;
}
