<?php

/**
 * Implements hook_block_info().
 */
function share_light_block_info() {
  $blocks = array();

  $blocks['current_page'] = array(
    'info' => t('Share this page'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param string $path to the page - current url will be used if empty
 * @param array $options additional overrides for default options
 * @return renderable array
 */
function share_light_block_view($id, $link = NULL, $options = array()) {
  $v = array();
  $v['subject'] = isset($options['subject']) ? t($options['subject']) : t('Share this page!');

  $links = array();
  $title = isset($options['title']) ? $options['title'] : drupal_get_title();

  if (!is_array($link)) {
    if (is_string($link)) {
      $link = array('path' => $link);
    } else {
      $link = array('path' => current_path());
    }
  }
  $url = url($link['path'], $link + array('absolute' => TRUE));

  if (($node = menu_get_object()) && $node->nid) {
    // if there is a defined entry for the share_light toggle field use this
    // otherwise check for the share_light default behaviour variable
    $field = field_get_items('node', $node, 'share_light_toggle');
    // check for remaining "old" fields (former field name)
    if (!$field || !count($field)) {
      $field = field_get_items('node', $node, 'field_share_light');
    }
    if ($field && count($field)) {
      if (!$field[0]['value']) {
        return NULL;
      }
    } elseif (variable_get('share_light_default_toggle', '1') == '0') {
      return NULL;
    }

  }

  // if share is set valid, use this to generate the URL to share
  // overrides any previously defined paths/urls
  if (isset($_GET['share'])) {
    $share_url = $_GET['share'];
    if (valid_url($share_url, TRUE)) { // if absolute url: use it
      $url = $share_url;
      // since we do not want to scrape the title from the (most likely) remote page...
      if(isset($title)) {
        $title = '[shared via] ' . $title;
      }
    } else if (valid_url($share_url, FALSE)) { // if its an relative path, generate it
      $link['path'] = $share_url;
      $url = url($link['path'], array('absolute' => TRUE));
      // get the title to the shared page and override the prev set $title
      $p = drupal_get_normal_path($link['path']);
      $node = menu_get_object('node', 1, $p);
      if($node) {
        $title = $node->title;
      }
    }
  }

  $links['facebook'] = array(
    'title' => 'Facebook',
    'href' => 'https://www.facebook.com/sharer.php',
    'query' => array('u' => urlencode($url), 't' => $title),
    'attributes' => array('title' => t('Share this via Facebook!'))
  );
  $links['twitter'] = array(
    'title' => 'Twitter',
    'href' => 'http://twitter.com/home',
    'query' => array('status' => $url),
    'attributes' => array('title' => t('Share this via Twitter!'))
  );
  $links['forward'] = array(
    'title' => 'E-Mail',
    'href' => 'forward',
    'query' => array('path' => $link['path'], 'query' => $link['query']),
    'attributes' => array('title' => t('Share this via E-Mail!'))
  );

  foreach ($links as &$x) {
    $x['title'] = "<span>{$x['title']}</span>";
    $x['html'] = TRUE;
    $x['attributes']['target'] = '_blank';
  }
  $v['content'] = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array('class' => array('share-light')),
  );
  return $v;
}

/**
 * Implements HOOK_block_view_MODULE_DELTA_alter().
 */
function share_light_block_view_share_light_current_page_alter($data, $block) {
  if (($node = menu_get_object()) && $node->nid) {
    // use field share_light_title to override default block title
    $field_title = field_get_items('node', $node, 'share_light_title');
    if ($field_title && count($field_title) && $field_title[0]['value']) {
      $block->title = $field_title[0]['value'];
    }
  }
}
