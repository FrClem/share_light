<?php

/**
 * helper config function.
 */
function _share_light_channels() {
  // return the known channles indexed by channel name
  return array(
    'twitter' => t('Twitter'),
    'facebook' => t('Facebook'),
    'forward' => t('Email'),
    'pinterest' => t('Pinterest'),
  );
}

function _share_light_defaults() {
  $default = array(
    'toggle' => variable_get('share_light_default_toggle', 1),
    'options' => array (
      'subject' => t('Share this page!'),
      'share_url' => '',
      'counter_toggle' => variable_get('share_light_default_counter_toggle', 1),
      'advanced' => array (
        'channel_facebook_toggle' => 1,
        'channel_forward_toggle' => 1,
        'channel_pinterest_toggle' => 1,
        'channel_pinterest_text' => '',
        'channel_twitter_toggle' => 1,
        'channel_twitter_text' => '',
      ),
      'image' => array(
        'fid' => 0,
      ),
    ),
  );
  return $default;
}

/**
 * Implements hook_menu().
 */
function share_light_menu() {
  // implement a special node-share page on behalf
  // of forward.module
  $items['node/%node/forward'] = array(
    'title'            => variable_get('forward_email_title', 'Forward this page to a friend'),
    'page callback'    => 'share_light_forward_page',
    'page arguments'   => array(1),
    'access arguments' => array('access forward'),
    'type'             => MENU_CALLBACK
  );

  $items['admin/config/content/share_light'] = array(
    'title' => t('Share light'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('share_light_settings_form'),
    'description' => 'Configure share light block.',
    'access arguments' => array('administer share'),
  );
  return $items;
}

/**
 * Menu callback: settings form.
 */
function share_light_settings_form() {

  $form['share_light_channels_enabled'] = array(
    '#title' => t('Enable social media channels for sharing.'),
    '#type' => 'checkboxes',
    '#options' => _share_light_channels(),
    '#description' => t('The social media channels available for sharing.'),
    '#default_value' => variable_get('share_light_channels_enabled', array_keys(_share_light_channels())),
  );

  return system_settings_form($form);
}

/**
 * Page callback for node/%/forward
 */
function share_light_forward_page($node) {
  $_GET['path'] = 'node/' . $node->nid;
  return forward_page();
}

/**
 * Implements hook_block_info().
 */
function share_light_block_info() {
  $blocks = array();

  $blocks['current_page'] = array(
    'info' => t('Share this page'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param string $path to the page - current url will be used if empty
 * @param array $options additional overrides for default options
 * @return renderable array
 */
function share_light_block_view($id, $link = NULL, $options = array()) {
  if ($link) {
    if (!is_array($link)) {
      $link = array('path' => $link);
    }
    $options['share_url'] = $link['path'];
  }

  // Load options from the currently displayed node.
  if ($node = menu_get_object()) {
    if ($item = _share_light_field_config_by_node($node, 'share_light')) {
      if ($item['toggle'] == '0') {
        return NULL;
      }
      if (empty($item['options']['subject'])) {
        unset($item['options']['subject']);
      }
      $options += $item['options'];
    }
  }

  // Global defaults
  $defaults = _share_light_defaults();
  $options += $defaults['options'];

  // overrides based on the current page / shared page.
  if (empty($options['share_url'])) {
    $options['share_url'] = current_path();
  }

  drupal_alter('share_light_options', $options);

  $link['path'] = $options['share_url'];
  $url = url($link['path'], $link + array('absolute' => TRUE));

  // try to use a default image url if no image url is saved (yet)
  $image_default_fields = variable_get('share_light_image_default_fields', array());
  // an fid of 0 gets saved if no image is selected
  // @TODO deal with the case somebody explicitly does not want to
  // share a default field
  if ((empty($options['image']) || $options['image']['fid'] == 0) && !empty($node->nid)) {
    foreach ($image_default_fields as $try_field) {
      if ($found_image = field_get_items('node', $node, $try_field)) {
        $options['image']['fid'] = $found_image[0]['fid'];
      }
    }
  }

  $options['image'] = file_load($options['image']['fid']);

  $links = array();
  // display the enabled channels
  $channels = variable_get('share_light_channels_enabled', _share_light_channels());
  foreach ($channels as $channel_name => $channel_value) {
    if ($channel_value) {
      if (!isset($options['advanced']['channel_'.$channel_name.'_toggle']) ||
        $options['advanced']['channel_'.$channel_name.'_toggle'] == 1) {
        $call_name = '_share_light_channel_' . $channel_name;
        if (function_exists($call_name)) {
          $channel_link = $call_name($url, $options, $link);
          if ($channel_link) {
            $links[$channel_name] = $channel_link;
          }
        }
      }
    }
  }

  foreach ($links as &$x) {
    $x['title'] = "<span>{$x['title']}</span>";
    $x['html'] = TRUE;
    $x['attributes']['target'] = '_blank';
  }

  $v['subject'] = $options['subject'];
  $v['content'] = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array('class' => array('share-light')),
  );
  return $v;
}

function _share_light_channel_facebook($url, $options, $link) {
  return array(
    'title' => 'Facebook',
    'href' => 'https://www.facebook.com/sharer.php',
    'query' => array('u' => urlencode($url)),
    'attributes' => array('title' => t('Share this via Facebook!'))
  );
}
function _share_light_channel_twitter($url, $options, $link) {
  $text = isset($options['advanced']['channel_twitter_text']) ? $options['advanced']['channel_twitter_text'] : '';
  return array(
    'title' => 'Twitter',
    'href' => 'http://twitter.com/share',
    'query' => array('text' => $text, 'url' => $url),
    'attributes' => array('title' => t('Share this via Twitter!'))
  );
}
function _share_light_channel_pinterest($url, $options, $link) {
  $text = isset($options['advanced']['channel_pinterest_text']) ? $options['advanced']['channel_pinterest_text'] : '';

  // get the url from the media object
  $media_url = '';
  if (!empty($options['image']->type)) {
    if ($options['image']->type == 'image' && ($image = image_load($options['image']->uri))) {
      $media_url = file_create_url($image->source);
      return array(
        'title' => 'Pinterest',
        'href' => 'http://www.pinterest.com/pin/create/button/',
        'query' => array('url' => $url, 'media' => $media_url, 'description' => $text),
        'attributes' => array('title' => t('Share this via Pinterest!'))
      );
    }
  }
}

function _share_light_channel_forward($url, $options, $link) {
  $query['path'] = $link['path'];
  if (isset($link['query'])) {
    $query['query'] = $link['query'];
  }
  $parts = explode('/', $query['path']);
  if (count($parts) == 2 && $parts[0] == 'node' && is_numeric($parts[1])) {
    unset($query['path']);
    return array(
      'title' => 'E-Mail',
      'href' => $link['path'] . '/forward',
      'query' => $query,
      'attributes' => array('title' => t('Share this via E-Mail!'))
    );
  } else {
    return array(
      'title' => 'E-Mail',
      'href' => 'forward',
      'query' => $query,
      'attributes' => array('title' => t('Share this via E-Mail!'))
    );
  }
}

/**
 * Implements hook_field_widget_form().
 */
function share_light_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $item = isset($items[$delta]) ? $items[$delta] : array();
  if (isset($instance['default_value'][$delta]) && !isset($items[$delta])) {
    $item = $instance['default_value'][$delta];
  }

  $available_channels = _share_light_channels();
  $enabled_channels = variable_get('share_light_channels_enabled', $available_channels);

  $item = drupal_array_merge_deep(_share_light_defaults(), $item);

  $element['toggle'] = array(
    '#title' => t('Display a share block.'),
    '#description' => t('Display a share block.'),
    '#type' => 'checkbox',
    '#default_value' => $item['toggle'],
  );

  $element['options'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(
        '#edit-'.strtr($field['field_name'], '_', '-').'-'.$langcode.'-'.$delta.'-toggle' => array('checked' => TRUE),
      ),
    ),
  );

  $element['options']['subject'] = array(
    '#title' => t('Title of the share-box.'),
    '#description' => t('The title is typically displayed right above the share buttons.'),
    '#type' => 'textfield',
    '#default_value' => $item['options']['subject'],
  );

  $element['options']['share_url'] = array(
    '#title' => t('URL to be shared.'),
    '#description' => t('URL to be shared. Leave this empty to share the current page.'),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => $item['options']['share_url'],
  );

  $element['options']['image'] = array(
    '#title' => t('Image to be shared.'),
    '#description' => t('Image to be shared.'),
    '#type' => 'media',
    '#default_value' => $item['options']['image'],
    '#access' => FALSE, // TODO
  );

  $element['options']['counter_toggle'] = array(
    '#title' => t('Show counter (number of shares) along with share options'),
    '#description' => t('Show counter (number of shares) along with share options'),
    '#type' => 'checkbox',
    '#default_value' => $item['options']['counter_toggle'],
    '#access' => FALSE, // TODO
);

  $element['options']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced share options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $weight = 10;
  foreach ($enabled_channels as $channel_name => $channel_value) {
    $title = $available_channels[$channel_name];
    $element['options']['advanced']['channel_'.$channel_name.'_toggle'] = array(
      '#title' => t('Show '.$title.' share button.'),
      '#description' => t('Enable '.$title.' on this page.'),
      '#type' => 'checkbox',
      '#default_value' => $item['options']['advanced']['channel_'.$channel_name.'_toggle'],
      '#access' => $channel_value ? TRUE : FALSE,
      '#weight' => $weight,
    );

    // needs a text field
    if ($channel_name == 'twitter' || $channel_name == 'pinterest') {
      $title = $available_channels[$channel_name];
      $textarea =  array(
        '#title' => t('Share text for ' . $title . '.'),
        '#description' => t('Share text for ' . $title . '.'),
        '#type' => 'textarea',
        '#cols' => 60,
        '#rows' => 2,
        '#maxlength' => 225,
        '#attributes' => array(),
        '#default_value' => $item['options']['advanced']['channel_'.$channel_name.'_text'],
        '#access' => $channel_value ? TRUE : FALSE,
        '#weight' => $element['options']['advanced']['channel_'.$channel_name.'_toggle']['#weight'] + 1,
        '#states' => array(
          'visible' => array(
            '#edit-'.strtr($field['field_name'], '_', '-').'-'.$langcode.'-'.$delta.'-options-advanced-channel-'.$channel_name.'-toggle' => array('checked' => TRUE),
          ),
        ),
      );
      // Twitter
      if ($channel_name == 'twitter') {
        $textarea['#title'] = t('Tweet text for ' . $title . '.');
        $textarea['#description'] = t('Tweet text for ' . $title . '.');
        $textarea['#maxlength'] = 116; // = 140 - 1 - 23 (tweet max-length - space - url in https)

      // Pinterest
      } else if ($channel_name == 'pinterest') {
        $textarea['#title'] = t('Description text for ' . $title . '.');
        $textarea['#description'] = t('Description text for ' . $title . '.');
        $textarea['#maxlength'] = 500; // the pinterest max-length for descriptions
      }

      $element['options']['advanced']['channel_'.$channel_name.'_text'] = $textarea;
    }

    $weight += 10;
  }

  return $element;
}

/**
 * Implements hook_field_info().
 */
function share_light_field_info() {
  $info['share_light'] = array(
    'label' => t('Share light'),
    'description' => t('Allows you to display a share block.'),
    'settings' => array('style' => NULL),
    'default_widget' => 'share_light',
    'default_formatter' => 'share_light',
  );
  return $info;
}

/**
 * Implements hook_field_widget_info().
 */
function share_light_field_widget_info() {
  $info['share_light'] = array(
    'label' => t('Share light'),
    'field types' => array('share_light'),
    'settings' => array('size' => 60),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_info().
 */
function share_light_field_formatter_info() {
  $info['share_light'] = array(
    'label' => 'Share light',
    'field types' => array('share_light'),
  );
  return $info;
}

/**
 * Implements hook_field_presave().
 */
function share_light_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'share_light') {
    foreach ($items as &$item) {
      $item['options'] = serialize($item['options']);
    }
  }
}

/**
 * Implements hook_field_load().
 */
function share_light_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  if ($field['type'] == 'share_light') {
    foreach ($entities as $id => $entity) {
      foreach ($items[$id] as &$item) {
        $item['options'] = unserialize($item['options']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function share_light_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * utility function: returns all field items by field type in array
 * (indexed by field name)
 */
function _share_light_field_config_by_node($node, $field_type) {
  $instances = field_info_instances('node', $node->type);
  foreach ($instances as $instance) {
    $field_info = field_info_field($instance['field_name']);
    if ($field_info['type'] == $field_type) {
      $item = field_get_items('node', $node, $instance['field_name']);
      $data = array();
      if ($item) {
        $data += $item[0];
      }
      if (empty($data['options']['subject'])) {
        unset($data['options']['subject']);
      }
      if (count($instance['default_value'])) {
        $data += $instance['default_value'][0];
      }
      if (empty($data['options']['subject'])) {
        unset($data['options']['subject']);
      }
      return $data;
    }
  }
  return array();
}
