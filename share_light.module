<?php

/**
 * helper config function.
 */
function _share_light_channels() {
  // return the known channles indexed by channel name
  return array(
    'twitter' => t('Twitter'),
    'facebook' => t('Facebook'),
    'forward' => t('Email'),
  );
}

/**
 * Implements hook_menu().
 */
function share_light_menu() {
  // implement a special node-share page on behalf
  // of forward.module
  $items['node/%node/forward'] = array(
    'title'            => variable_get('forward_email_title', 'Forward this page to a friend'),
    'page callback'    => 'share_light_forward_page',
    'page arguments'   => array(1),
    'access arguments' => array('access forward'),
    'type'             => MENU_CALLBACK
  );

  $items['admin/config/content/share_light'] = array(
    'title' => t('Share light'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('share_light_settings_form'),
    'description' => 'Configure share light block.',
    'access arguments' => array('administer share'),
  );
  return $items;
}

/**
 * Menu callback: settings form.
 */
function share_light_settings_form() {

  $form['channels'] = array(
    '#title' => t('Enable social media channels for sharing.'),
    '#type' => 'checkboxes',
    '#options' => _share_light_channels(),
    '#description' => t('The content types for which to enable Open Graph meta tags. If none are selected then tags will be enabled for ALL content types.'),
    '#default_value' => variable_get('share_light_enabled_channels', array_keys(_share_light_channels())),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  return $form;
}


function share_light_settings_form_submit($form, &$form_state) {

  $values = $form_state['values'];

  // save content types enabled
  variable_set('share_light_enabled_channels', $values['channels']);

  // success
  drupal_set_message("Share light settings have been updated");
}
/**
 * Page callback for node/%/forward
 */
function share_light_forward_page($node) {
  $_GET['path'] = 'node/' . $node->nid;
  return forward_page();
}

/**
 * Implements hook_block_info().
 */
function share_light_block_info() {
  $blocks = array();

  $blocks['current_page'] = array(
    'info' => t('Share this page'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param string $path to the page - current url will be used if empty
 * @param array $options additional overrides for default options
 * @return renderable array
 */
function share_light_block_view($id, $link = NULL, $options = array()) {
  $v = array();
  $v['subject'] = isset($options['subject']) ? t($options['subject']) : t('Share this page!');

  $links = array();
  $title = isset($options['title']) ? $options['title'] : drupal_get_title();

  if (!is_array($link)) {
    if (is_string($link)) {
      $link = array('path' => $link);
    } else {
      $link = array('path' => current_path());
    }
  }
  $url = url($link['path'], $link + array('absolute' => TRUE));

  $self = NULL;
  if (($node = menu_get_object()) && $node->nid) {
    $self = $node;
    // if there is a defined entry for the share_light toggle field use this
    // otherwise check for the share_light default behaviour variable
    $field = field_get_items('node', $node, 'share_light_toggle');
    // check for remaining "old" fields (former field name)
    if (!$field || !count($field)) {
      $field = field_get_items('node', $node, 'field_share_light');
    }
    if ($field && count($field)) {
      if (!$field[0]['value']) {
        return NULL;
      }
    } elseif (variable_get('share_light_default_toggle', '1') == '0') {
      return NULL;
    }

  }

  if (isset($_GET['share'])) {
    $share_url = $_GET['share'];
  }

  $check_url = (isset($share_url) && !empty($share_url)) ? $share_url : $url;

  // call hook_share_light_alter to override the share_url
  // you can determine whether to override in the hook
  // use this for further customizations
  $results = module_invoke_all('share_light_alter', $self, $check_url);
  if (isset($results['url']) && !empty($results['url'])) {
    $share_url = $results['url'];
  }
  if (isset($results['title']) && !empty($results['title'])) {
    $title = $results['title'];
  }

  // if share is set valid, use this to generate the URL to share
  // overrides any previously defined paths/urls
  if (!empty($share_url)) {
    if (valid_url($share_url, TRUE)) { // if absolute url: use it
      $url = $share_url;
      // since we do not want to scrape the title from the (most likely) remote page...
      if(isset($title)) {
        $title = '[shared via] ' . $title;
      }
    } else if (valid_url($share_url, FALSE)) { // if its an relative path, generate it
      $link['path'] = $share_url;
      $url = url($link['path'], array('absolute' => TRUE));
      // get the title to the shared page and override the prev set $title
      $p = drupal_get_normal_path($link['path']);
      $node = menu_get_object('node', 1, $p);
      if($node) {
        $title = $node->title;
      }
    }
  }

  // get enabled channels
  $channels = variable_get('share_light_enabled_channels', array_keys(_share_light_channels()));
  foreach ($channels as $channel_name => $channel_value) {
    if ($channel_value) {
      $call_name = '_share_light_channel_' . $channel_name;
      $links[$channel_name] = $call_name($channel_name, $channel_value, $url, $title, $link);
    }
  }

  foreach ($links as &$x) {
    $x['title'] = "<span>{$x['title']}</span>";
    $x['html'] = TRUE;
    $x['attributes']['target'] = '_blank';
  }
  $v['content'] = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array('class' => array('share-light')),
  );
  return $v;
}

/**
 * Implements HOOK_block_view_MODULE_DELTA_alter().
 */
function share_light_block_view_share_light_current_page_alter($data, $block) {
  if (($node = menu_get_object()) && $node->nid) {
    // use field share_light_title to override default block title
    $field_title = field_get_items('node', $node, 'share_light_title');
    if ($field_title && count($field_title) && $field_title[0]['value']) {
      $block->title = $field_title[0]['value'];
    }
  }
}

function _share_light_channel_facebook($channel_name, $channel_value, $url, $title, $link) {
  return array(
    'title' => 'Facebook',
    'href' => 'https://www.facebook.com/sharer.php',
    'query' => array('u' => urlencode($url), 't' => $title),
    'attributes' => array('title' => t('Share this via Facebook!'))
  );
}
function _share_light_channel_twitter($channel_name, $channel_value, $url, $title, $link) {
  return array(
    'title' => 'Twitter',
    'href' => 'http://twitter.com/home',
    'query' => array('status' => $url),
    'attributes' => array('title' => t('Share this via Twitter!'))
  );
}
function _share_light_channel_forward($channel_name, $channel_value, $url, $title, $link) {
  $query['path'] = $link['path'];
  if (isset($link['query'])) {
    $query['query'] = $link['query'];
  }
  $parts = explode('/', $query['path']);
  if (count($parts) == 2 && $parts[0] == 'node' && is_numeric($parts[1])) {
    unset($query['path']);
    return array(
      'title' => 'E-Mail',
      'href' => $link['path'] . '/forward',
      'query' => $query,
      'attributes' => array('title' => t('Share this via E-Mail!'))
    );
  } else {
    return array(
      'title' => 'E-Mail',
      'href' => 'forward',
      'query' => $query,
      'attributes' => array('title' => t('Share this via E-Mail!'))
    );
  }
}
